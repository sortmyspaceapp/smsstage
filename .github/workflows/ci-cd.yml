name: SpaceFinder CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME_BACKEND: sortmyspaceapp/smsstage-backend
  IMAGE_NAME_ADMIN: sortmyspaceapp/smsstage-admin

jobs:
  # Security and Code Quality Checks
  security:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            admin-dashboard/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Install admin dependencies
        run: |
          cd admin-dashboard
          npm ci

      - name: Run backend security audit
        run: |
          cd backend
          npm audit --audit-level=moderate

      - name: Run admin security audit
        run: |
          cd admin-dashboard
          npm audit --audit-level=moderate

      - name: Run backend linting
        run: |
          cd backend
          npm run lint || echo "Linting not configured"

      - name: Run admin linting
        run: |
          cd admin-dashboard
          npm run lint || echo "Linting not configured"

      - name: Run backend tests
        run: |
          cd backend
          npm test || echo "Tests not configured"

      - name: Run admin tests
        run: |
          cd admin-dashboard
          npm test -- --coverage --watchAll=false || echo "Tests not configured"

  # Build and Test Backend
  backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Generate Prisma client
        run: |
          cd backend
          npx prisma generate

      - name: Build backend
        run: |
          cd backend
          npm run build

      - name: Test build output
        run: |
          cd backend
          node dist/index.js --version || echo "Build successful"

  # Build and Test Admin Dashboard
  admin:
    name: Build Admin Dashboard
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: admin-dashboard/package-lock.json

      - name: Install dependencies
        run: |
          cd admin-dashboard
          npm ci

      - name: Build admin dashboard
        run: |
          cd admin-dashboard
          npm run build

      - name: Test build output
        run: |
          cd admin-dashboard
          ls -la build/

  # Build Docker Images
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend, admin]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for admin
        id: meta-admin
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME_ADMIN }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push admin image
        uses: docker/build-push-action@v5
        with:
          context: ./admin-dashboard
          file: ./admin-dashboard/Dockerfile
          push: true
          tags: ${{ steps.meta-admin.outputs.tags }}
          labels: ${{ steps.meta-admin.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Production
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Setup server and deploy
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # Update system packages
            sudo dnf update -y
            
            # Install required packages
            sudo dnf install -y git curl wget
            
            # Install Docker
            if ! command -v docker &> /dev/null; then
              sudo dnf install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi
            
            # Install Docker Compose
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Create application directory
            sudo mkdir -p /opt/spacefinder
            sudo chown $USER:$USER /opt/spacefinder
            cd /opt/spacefinder
            
            # Clone repository if not exists
            if [ ! -d ".git" ]; then
              git clone https://github.com/sortmyspaceapp/smsstage.git .
            else
              git pull origin main
            fi
            
            # Copy environment file
            if [ ! -f ".env.production" ]; then
              cp env.production.example .env.production
              echo "Please update .env.production with your actual values"
            fi
            
            # Update images
            docker-compose -f docker-compose.prod.yml pull
            
            # Stop services
            docker-compose -f docker-compose.prod.yml down
            
            # Start services with new images
            docker-compose -f docker-compose.prod.yml up -d
            
            # Run database migrations
            docker-compose -f docker-compose.prod.yml exec -T backend npx prisma db push || true
            
            # Clean up old images
            docker image prune -f
            
            # Check service health
            sleep 30
            curl -f http://localhost:3000/health || exit 1
            curl -f http://localhost:8080/health || exit 1
            
            echo "Deployment successful!"
          EOF

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi


